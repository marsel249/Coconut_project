#–ü—Å–µ–≤–¥–æ–∫–æ–¥. –†–µ–ª—å–Ω—É—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å FastApi —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–∫–∞—Ö
from itertools import product

# from fastapi import APIRouter, FastAPI
# from pydantic import BaseModel, Field
# import requests
#
# class RegisterRequest(BaseModel):
# 	login: str  = Field(..., min_length=6, max_length=10)
# 	password: str  = Field(..., min_length=6, max_length=10)
#
# mock_server_router = APIRouter()
#
# @mock_server_router.post("/register")
# async def register(register_request: RegisterRequest):
# 	register_request.login
# 	register_request.password
#
# app = FastAPI()
# app.include_router(mock_server_router)
#
# #–ü—Å–µ–≤–¥–æ–∫–æ–¥ —Ç–∞–∫ –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–µ—Ä–≤–µ—Ä —Å –µ–Ω–¥–ø–æ–π–Ω—Ç–æ–º api.example.com/product
# # CinescopeFork\Modul_4\PydanticExamples\test_pydantic.py
# product_id = 1
# response = requests.get(f"https://api.example.com/product/{product_id}")
# response.json()
#  #{"name": "Laptop", "price": 999.99, "in_stock": "false", "product": "new",  "color": "black", "manufacturer": {"name": "MSI"}}




# from fastapi import FastAPI, APIRouter
# from pydantic import BaseModel, Field
#
# app = FastAPI()
# router = APIRouter()
#
# # –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
# class RegisterRequest(BaseModel):
#     login: str = Field(..., min_length=6, max_length=10)
#     password: str = Field(..., min_length=6, max_length=10)
#
# # –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
# @router.post("/register")
# async def register(register_request: RegisterRequest):
#     return {"message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", "data": register_request}
#
# app.include_router(router)

'''–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ API'''

# import requests
# from pydantic import BaseModel
#
# # –ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ API
# class Product(BaseModel):
#     name: str
#     price: float
#     in_stock: bool
#     product: str
#     color: str
#     manufacturer: dict
#
# # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
# response = requests.get("https://api.example.com/product/123")
#
# # –ü–æ–ª—É—á–∞–µ–º JSON-–æ—Ç–≤–µ—Ç
# product_json = response.json()
#
# # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic
# try:
#     product = Product(**product_json)
#     print("‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã:", product)
# except Exception as e:
#     print("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:", e)




from pydantic import field_validator, BaseModel

class Product(BaseModel):
    name: str
    price: float
    in_stock: bool
    product: str
    color: str
    manufacturer: dict

    # –ö–∞—Å—Ç–æ–º–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è `in_stock`
    @field_validator("in_stock", mode="before")
    def convert_boolean(cls, value):
        if isinstance(value, str):
            return value.lower() == "true"
        return value

product_json = {
    "name": "Laptop",
    "price": 999.99,
    "in_stock": "false",  # ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ False
    "product": "new",
    "color": "black",
    "manufacturer": {"name": "MSI"}
}

product = Product(**product_json)
print(product.in_stock)  # üîπ False

