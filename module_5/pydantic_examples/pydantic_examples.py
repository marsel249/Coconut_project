# # CinescopeFork\Modul_4\PydanticExamples\test_pydantic.py
# from typing import Optional
# from pydantic import BaseModel, Field
# from enum import Enum
# # from venv import logger
#
# import logging
# logger = logging.getLogger(__name__)
#
# class ProductType(str, Enum):
#     NEW = "new"
#     PREVIOUS_USE = "previous_use"
#
#
# class Manufacturer(BaseModel):
#     name: str
#     # city: Optional[str] = None
#     # street: Optional[str] = None
#     city: str | None = None
#     street: str | None = None
#
# class Product(BaseModel):
#     # –ø–æ–ª–µ name –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –¥–ª–∏–Ω—É –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 3 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π
#     name: str = Field(..., min_length=3, max_length=50, description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
#     # –¢–æ–∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ –≤—ã—à–µ, –ø–æ –¥—Ä—É–≥–æ–º—É.. "..." - —ç—Ç–æ –¥–µ—Ñ–æ–ª—Ç –∑–Ω–∞—á–µ–Ω–∏–µ
#     #name: str = Field(default=..., min_length=3, max_length=50)
#     # –ø–æ–ª–µ price –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0
#     price: float = Field(..., gt=0, description="–¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞")
#     #–µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä gt=0(>0), ge=0(>=0), lt=100(<100), le=100(<=100)
#     # –ø–æ–ª–µ in_stock –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = False
#     in_stock: bool = Field(default=False, description="–ï—Å—Ç—å –ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏")
#     # –ø–æ–ª–µ color –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ "black" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
#     color: str = "black"
#     # –ø–æ–ª–µ year –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ. –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—å–µ–∫—Ç–∞
#     year: Optional[int] = None
#     # –ø–æ–ª–µ product –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–∏–ø Enum (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ 1 –∏–∑ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–π)
#     product: ProductType
#     # –ø–æ–ª–µ manufacturer –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–∏–ø –¥—Ä—É–≥–æ–π BaseModel
#     manufacturer: Manufacturer
#
#
# def test_product():
#     # –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—å–µ–∫—Ç–∞ + –≤ –ø–æ–ª–µ price –ø–µ—Ä–µ–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞
#     product = Product(name="Laptop", price="999.99", product=ProductType.NEW, manufacturer=Manufacturer(name="MSI", city='Novosibirsk'))
#     logger.info(f"{product=}")
#     # Output: product=Product(name='Laptop', price=999.99, in_stock=False, color='black', year=None, product=<ProductType.NEW: 'new'>, manufacturer=Manufacturer(name='MSI', city='Novosibirsk', street=None))
#
#     # –ü—Ä–∏–º–µ—Ä –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –æ–±—å–µ–∫—Ç–∞ –≤ json
#     json_data = product.model_dump_json(exclude_unset=True)
#     logger.info(f"{json_data=}")
#     # Output: json_data='{"name":"Laptop","price":999.99,"product":"new","manufacturer":{"name":"MSI", "city":"Novosibirsk"}}'
#
#     # –ü—Ä–∏–º–µ—Ä –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ json –≤ –æ–±—å–µ–∫—Ç
#     new_product = Product.model_validate_json(json_data)
#     logger.info(f"{new_product=}")
#     # Output: new_product=Product(name='Laptop', price=999.99, in_stock=False, color='black', year=None, product=<ProductType.NEW: 'new'>, manufacturer=Manufacturer(name='MSI', city='Novosibirsk', street=None))




# from pydantic import BaseModel, Field
#
# class Product(BaseModel):
#     name: str = Field(..., min_length=3, max_length=50, description="–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞")
#     price: float = Field(default="Unknown", gt=0, description="–¶–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∞") # default="Unknown" - –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∑–∞–Ω—á–µ–Ω–∏–µ, –±—É–¥–µ—Ç - Unknown (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
#
# # # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –≤—ã–∑–æ–≤–µ—Ç –æ—à–∏–±–∫—É
# # try:
# #     product = Product()
# # except Exception as e:
# #     print(e)  # Output: "field required" –¥–ª—è –æ–±–æ–∏—Ö –ø–æ–ª–µ–π
#
# # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
# product = Product(name="Laptop", price=1000.0)
#
# print(product)
#
# # Output: name='Laptop' price=1000.0

'''Field'''
# from pydantic import BaseModel, Field
# class Product(BaseModel):
#     name: str = Field(..., min_length=3)  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
#     price: float = Field(default=0.0, ge=0)  # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º

'''Optional –∏ Default'''
# from typing import Optional
# from pydantic import BaseModel
#
# class Product(BaseModel):
#     name: str
#     year: Optional[int] = None  # –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
#
# p1 = Product(name="Phone")
# p2 = Product(name="Phone", year=2022)

'''Enum'''
# from enum import Enum
# from pydantic import BaseModel
#
# class ProductType(str, Enum):
#     NEW = "new"
#     USED = "used"
#
# class Product(BaseModel):
#     name: str
#     product_type: ProductType
#
# product = Product(name='my name', product_type=ProductType.NEW)
# print(product)

'''–í–ª–æ–∂–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏'''
# from pydantic import BaseModel
# from typing import Optional
#
# class Manufacturer(BaseModel):
#     name: str
#     city: Optional[str] = None
#
# class Product(BaseModel):
#     name: str
#     manufacturer: Manufacturer  # üëà –í–ª–æ–∂–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
#
# my_object = Product(name='my_product', manufacturer=Manufacturer(name='name_my_Manufactor', city='Novosibirsk'))
# print(my_object)
#
# product = Product(name="Phone", manufacturer={"name": "Samsung"})
# print(product)
# # Product(name='Phone', manufacturer=Manufacturer(name='Samsung', city=None))

'''–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ JSON'''

# from pydantic import BaseModel
#
# class Product(BaseModel):
#     name: str
#     price: float
#     random_inf : str | None = None
#
# product = Product(name="Laptop", price=999.99)
# json_data = product.model_dump_json(exclude_unset=True) # <- –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ json
# print(product) # name='Laptop' price=999.99 random_inf=None
# print(json_data) # '{"name": "Laptop", "price": 999.99}'
# json_data_new = product.model_dump_json # <- –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ json, –±–µ–∑ (exclude_unset=True)
# print(json_data_new) # <bound method BaseModel.model_dump_json of Product(name='Laptop', price=999.99, random_inf=None)>


'''–û–±—Ä–∞—Ç–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ (–∏–∑ JSON –≤ –æ–±—ä–µ–∫—Ç)'''

# from pydantic import BaseModel
#
# class Product(BaseModel):
#     name: str
#     price: float
#     random_inf : str | None = None
#
# product = Product(name="Laptop", price=999.99)
# json_data = product.model_dump_json(exclude_unset=True)
# new_product = Product.model_validate_json(json_data)
# print(json_data) # {"name":"Laptop","price":999.99}
# print(new_product) # name='Laptop' price=999.99 random_inf=None

'''–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö'''

# from pydantic import BaseModel
#
# class Product(BaseModel):
#     name: str
#     price: float
#     random_inf : str | None = None
#
# try:
#     p = Product(name="TV", price="–±–µ—Å–ø–ª–∞—Ç–Ω–æ") #–û—à–∏–±–∫–∞! "–±–µ—Å–ø–ª–∞—Ç–Ω–æ" –Ω–µ–ª—å–∑—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ.
# except Exception as e:
#     print(e)

# from pydantic import BaseModel, EmailStr, SecretStr, field_validator, model_validator, ConfigDict
#
# class Register(BaseModel):
#     model_config = ConfigDict(extra="forbid")
#
#     email: EmailStr
#     password: SecretStr
#     password_repeat: SecretStr
#
#     # 1) –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–∞—Ä–æ–ª–∏ (–æ–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã) –î–û —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
#     @field_validator("password", "password_repeat", mode="before")
#     @classmethod
#     def strip_spaces(cls, v):
#         s = v.get_secret_value() if hasattr(v, "get_secret_value") else str(v)
#         return SecretStr(s.strip())
#
#     # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–ª—É –ø–∞—Ä–æ–ª—è –ü–û–°–õ–ï —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
#     @field_validator("password")
#     @classmethod
#     def strong_password(cls, v: SecretStr) -> SecretStr:
#         s = v.get_secret_value()
#         if len(s) < 8:
#             raise ValueError("min length = 8")
#         return v
#
#     # 3) –î–æ —Å–±–æ—Ä–∫–∏ –º–æ–¥–µ–ª–∏ –º–æ–∂–µ–º –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∫–ª—é—á–∏ –≤—Ö–æ–¥–∞
#     @model_validator(mode="before")
#     @classmethod
#     def camel_to_snake(cls, data: dict):
#         if "passwordRepeat" in data and "password_repeat" not in data:
#             data = dict(data)
#             data["password_repeat"] = data.pop("passwordRepeat")
#         return data
#
#     # 4) –ü–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏ –º–æ–¥–µ–ª–∏ —Å–≤–µ—Ä—è–µ–º –ø–æ–ª—è –º–µ–∂–¥—É —Å–æ–±–æ–π
#     @model_validator(mode="after")
#     def passwords_match(self):
#         if self.password.get_secret_value() != self.password_repeat.get_secret_value():
#             raise ValueError("Passwords don't match")
#         return self